// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpcServices "github.com/jerry0420/queue-system/backend/repository/grpcServices"
	mock "github.com/stretchr/testify/mock"
)

// GrpcServiceServer is an autogenerated mock type for the GrpcServiceServer type
type GrpcServiceServer struct {
	mock.Mock
}

// GenerateCSV provides a mock function with given fields: _a0, _a1
func (_m *GrpcServiceServer) GenerateCSV(_a0 context.Context, _a1 *grpcServices.GenerateCSVRequest) (*grpcServices.GenerateCSVResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *grpcServices.GenerateCSVResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpcServices.GenerateCSVRequest) *grpcServices.GenerateCSVResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpcServices.GenerateCSVResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpcServices.GenerateCSVRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: _a0, _a1
func (_m *GrpcServiceServer) SendEmail(_a0 context.Context, _a1 *grpcServices.SendEmailRequest) (*grpcServices.SendEmailResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *grpcServices.SendEmailResponse
	if rf, ok := ret.Get(0).(func(context.Context, *grpcServices.SendEmailRequest) *grpcServices.SendEmailResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpcServices.SendEmailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *grpcServices.SendEmailRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedGrpcServiceServer provides a mock function with given fields:
func (_m *GrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {
	_m.Called()
}
