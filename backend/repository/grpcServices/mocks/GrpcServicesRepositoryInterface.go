// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// GrpcServicesRepositoryInterface is an autogenerated mock type for the GrpcServicesRepositoryInterface type
type GrpcServicesRepositoryInterface struct {
	mock.Mock
}

// GenerateCSV provides a mock function with given fields: ctx, name, content
func (_m *GrpcServicesRepositoryInterface) GenerateCSV(ctx context.Context, name string, content []byte) (string, error) {
	ret := _m.Called(ctx, name, content)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, name, content)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, name, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: ctx, subject, content, email, filepath
func (_m *GrpcServicesRepositoryInterface) SendEmail(ctx context.Context, subject string, content string, email string, filepath string) (bool, error) {
	ret := _m.Called(ctx, subject, content, email, filepath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) bool); ok {
		r0 = rf(ctx, subject, content, email, filepath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, subject, content, email, filepath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
